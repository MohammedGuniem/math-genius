{"version":3,"sources":["features/game/Game.module.css","features/game/gameSlice.js","features/game/StartBoard.js","features/game/GameBoard.js","features/game/Game.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","getNewQuestion","Operation","Math","floor","random","a","b","multipleOfa","i","push","length","firstDigit","secondDigit","gameSlice","createSlice","name","initialState","gameIsRunning","totalTime","timeRemaining","numberOfQuestions","currentQuestionNumber","numberOfCorrectAnswers","numberOfWrongAnswers","currentOperation","results","reducers","runGame","state","action","payload","time","currentUserAnswer","newQuestion","stopGame","result","Score","Time","generateNewQuestion","checkAnswer","correctResult","userAnswer","Number","StartTime","tick","actions","selectNumberOfQuestions","game","selectResults","selectGameIsRunning","selectFirstDigit","selectCurrentOperation","selectSecondDigit","selectCurrentQuestionNumber","selectNumberOfCorrectAnswers","selectNumberOfWrongAnswers","selectTimeRemaining","StartBoard","props","useState","setTime","setNumberOfQuestions","dispatch","useDispatch","useSelector","className","styles","timeSetting","button","aria-label","onClick","prevTime","value","questionSetting","prevNumberOfQuestions","UpDownMargins","map","index","key","timeToString","GameBoard","setCurrentUserAnswer","useEffect","interval","setInterval","clearInterval","row","textbox","type","onChange","e","target","onKeyDown","keyCode","sideMargins","totalSeconds","hours","minutes","seconds","round","Game","App","configureStore","reducer","gameReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae829adb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideMargins\":\"Game_sideMargins__1SF8q\",\"questionSetting\":\"Game_questionSetting__3xpYH\",\"timeSetting\":\"Game_timeSetting__1Ko_m\",\"UpDownMargins\":\"Game_UpDownMargins__QvvLI\",\"button\":\"Game_button__2EFH7\",\"value\":\"Game_value__3_XNt\",\"row\":\"Game_row__3IbnT\",\"textbox\":\"Game_textbox__1LeVA\",\"asyncButton\":\"Game_asyncButton__Mk0fc Game_button__2EFH7\"};","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nfunction getNewQuestion() {\r\n  let Operation = [\"รท\", \"X\", \"-\", \"+\"][\r\n    Math.floor(Math.random() * Math.floor(4))\r\n  ];\r\n  let a = Math.floor(Math.random() * Math.floor(11)) + 1;\r\n  let b = 0;\r\n  if (Operation !== \"รท\") {\r\n    b = Math.floor(Math.random() * (a - 0)) + 0;\r\n  } else {\r\n    let multipleOfa = [];\r\n    for (var i = 1; i <= a; i++) {\r\n      if (a % i === 0) multipleOfa.push(i);\r\n    }\r\n    b = multipleOfa[Math.floor(Math.random() * Math.floor(multipleOfa.length))];\r\n  }\r\n  return { firstDigit: a, secondDigit: b, Operation: Operation };\r\n}\r\n\r\nexport const gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState: {\r\n    gameIsRunning: false,\r\n    totalTime: null,\r\n    timeRemaining: null,\r\n    numberOfQuestions: null,\r\n    currentQuestionNumber: null,\r\n    numberOfCorrectAnswers: null,\r\n    numberOfWrongAnswers: null,\r\n    firstDigit: null,\r\n    secondDigit: null,\r\n    currentOperation: null,\r\n    results: [],\r\n  },\r\n  reducers: {\r\n    runGame: (state, action) => {\r\n      state.gameIsRunning = true;\r\n      state.totalTime = action.payload.time * 60; // Converting to seconds\r\n      state.timeRemaining = action.payload.time * 60; // Converting to seconds\r\n      state.numberOfQuestions = action.payload.numberOfQuestions;\r\n      state.currentQuestionNumber = 1;\r\n      state.currentUserAnswer = 0;\r\n      state.numberOfCorrectAnswers = 0;\r\n      state.numberOfWrongAnswers = 0;\r\n      let newQuestion = getNewQuestion();\r\n      state.firstDigit = newQuestion.firstDigit;\r\n      state.secondDigit = newQuestion.secondDigit;\r\n      state.currentOperation = newQuestion.Operation;\r\n    },\r\n    stopGame: (state) => {\r\n      let result = {\r\n        Score:\r\n          state.numberOfCorrectAnswers + \" out of \" + state.numberOfQuestions,\r\n        Time: state.totalTime - state.timeRemaining,\r\n      };\r\n      state.results.push(result);\r\n      state.gameIsRunning = false;\r\n    },\r\n    generateNewQuestion: (state) => {\r\n      let newQuestion = getNewQuestion();\r\n      state.firstDigit = newQuestion.firstDigit;\r\n      state.secondDigit = newQuestion.secondDigit;\r\n      state.currentOperation = newQuestion.Operation;\r\n    },\r\n    checkAnswer: (state, action) => {\r\n      let userAnswer = action.payload;\r\n      let correctResult;\r\n      switch (state.currentOperation) {\r\n        case \"รท\":\r\n          correctResult = state.firstDigit / state.secondDigit;\r\n          break;\r\n        case \"-\":\r\n          correctResult = state.firstDigit - state.secondDigit;\r\n          break;\r\n        case \"X\":\r\n          correctResult = state.firstDigit * state.secondDigit;\r\n          break;\r\n        case \"+\":\r\n          correctResult = state.firstDigit + state.secondDigit;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      // User answer is correct\r\n      if (Number(userAnswer) === correctResult) {\r\n        state.numberOfCorrectAnswers = state.numberOfCorrectAnswers + 1;\r\n        // User answer is wrong\r\n      } else {\r\n        state.numberOfWrongAnswers = state.numberOfWrongAnswers + 1;\r\n      }\r\n      // Last question is answered\r\n      if (state.numberOfQuestions === state.currentQuestionNumber) {\r\n        let result = {\r\n          Score:\r\n            state.numberOfCorrectAnswers + \" out of \" + state.numberOfQuestions,\r\n          Time: state.totalTime - state.timeRemaining,\r\n          StartTime: \"30.05.2020 18:50:15\",\r\n        };\r\n        state.results.push(result);\r\n        state.gameIsRunning = false;\r\n        // More questions remains to\r\n      } else {\r\n        let newQuestion = getNewQuestion();\r\n        state.firstDigit = newQuestion.firstDigit;\r\n        state.secondDigit = newQuestion.secondDigit;\r\n        state.currentOperation = newQuestion.Operation;\r\n        state.currentQuestionNumber = state.currentQuestionNumber + 1;\r\n        state.currentUserAnswer = 0;\r\n      }\r\n    },\r\n    tick: (state) => {\r\n      state.timeRemaining -= 1;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  runGame,\r\n  stopGame,\r\n  checkAnswer,\r\n  tick,\r\n  generateNewQuestion,\r\n} = gameSlice.actions;\r\n\r\nexport const selectTimeInMinutes = (state) => state.game.timeInMinutes;\r\nexport const selectNumberOfQuestions = (state) => state.game.numberOfQuestions;\r\nexport const selectResults = (state) => state.game.results;\r\nexport const selectGameIsRunning = (state) => state.game.gameIsRunning;\r\nexport const selectFirstDigit = (state) => state.game.firstDigit;\r\nexport const selectCurrentOperation = (state) => state.game.currentOperation;\r\nexport const selectSecondDigit = (state) => state.game.secondDigit;\r\nexport const selectCurrentQuestionNumber = (state) =>\r\n  state.game.currentQuestionNumber;\r\nexport const selectNumberOfCorrectAnswers = (state) =>\r\n  state.game.numberOfCorrectAnswers;\r\nexport const selectNumberOfWrongAnswers = (state) =>\r\n  state.game.numberOfWrongAnswers;\r\nexport const selectTotalTime = (state) => state.game.totalTime;\r\nexport const selectTimeRemaining = (state) => state.game.timeRemaining;\r\n\r\nexport default gameSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styles from \"./Game.module.css\";\r\nimport { runGame, selectResults } from \"./gameSlice\";\r\n\r\nexport function StartBoard(props) {\r\n  const [time, setTime] = useState(1); // Time in minutes\r\n  const [numberOfQuestions, setNumberOfQuestions] = useState(5); // Number of questions\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const results = useSelector(selectResults);\r\n\r\n  return (\r\n    <div>\r\n      <h4>Start New Game</h4>\r\n      <div>\r\n        <div className={styles.timeSetting}>\r\n          <h6>Timer in minutes</h6>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"Increment value\"\r\n            onClick={() => setTime((prevTime) => prevTime + 1)}\r\n          >\r\n            +\r\n          </button>\r\n          <span className={styles.value}>{time}</span>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"Decrement value\"\r\n            onClick={() => {\r\n              if (time > 1) setTime((prevTime) => prevTime - 1);\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n        </div>\r\n        <div className={styles.questionSetting}>\r\n          <h6>Number of Questions</h6>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"Increment value\"\r\n            onClick={() =>\r\n              setNumberOfQuestions(\r\n                (prevNumberOfQuestions) => prevNumberOfQuestions + 1\r\n              )\r\n            }\r\n          >\r\n            +\r\n          </button>\r\n          <span className={styles.value}>{numberOfQuestions}</span>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"Decrement value\"\r\n            onClick={() => {\r\n              if (numberOfQuestions > 1)\r\n                setNumberOfQuestions(\r\n                  (prevNumberOfQuestions) => prevNumberOfQuestions - 1\r\n                );\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n        </div>\r\n        <div className={styles.UpDownMargins}>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"Decrement value\"\r\n            onClick={() =>\r\n              dispatch(\r\n                runGame({\r\n                  time: time,\r\n                  numberOfQuestions: numberOfQuestions,\r\n                })\r\n              )\r\n            }\r\n          >\r\n            Start Game\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {results.length > 0 ? (\r\n        <div>\r\n          <h4>Best Results</h4>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Score</th>\r\n                <th>Time</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {results.map((result, index) => (\r\n                <tr key={index}>\r\n                  <td>{result.Score}</td>\r\n                  <td>{props.timeToString(result.Time)}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styles from \"./Game.module.css\";\r\nimport {\r\n  stopGame,\r\n  checkAnswer,\r\n  tick,\r\n  selectGameIsRunning,\r\n  selectTimeRemaining,\r\n  selectCurrentQuestionNumber,\r\n  selectNumberOfCorrectAnswers,\r\n  selectNumberOfWrongAnswers,\r\n  selectFirstDigit,\r\n  selectCurrentOperation,\r\n  selectSecondDigit,\r\n  selectNumberOfQuestions,\r\n} from \"./gameSlice\";\r\n\r\nexport function GameBoard(props) {\r\n  const [currentUserAnswer, setCurrentUserAnswer] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const numberOfQuestions = useSelector(selectNumberOfQuestions);\r\n  const timeRemaining = useSelector(selectTimeRemaining);\r\n  const firstDigit = useSelector(selectFirstDigit);\r\n  const currentOperation = useSelector(selectCurrentOperation);\r\n  const secondDigit = useSelector(selectSecondDigit);\r\n  const currentQuestionNumber = useSelector(selectCurrentQuestionNumber);\r\n  const numberOfCorrectAnswers = useSelector(selectNumberOfCorrectAnswers);\r\n  const numberOfWrongAnswers = useSelector(selectNumberOfWrongAnswers);\r\n  const gameIsRunning = useSelector(selectGameIsRunning);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (timeRemaining === 0) {\r\n        if (gameIsRunning) dispatch(stopGame());\r\n      } else if (gameIsRunning) {\r\n        dispatch(tick());\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [dispatch, timeRemaining, gameIsRunning]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>Time Remaining</div>\r\n        <div>{props.timeToString(timeRemaining)}</div>\r\n      </div>\r\n      <div className={styles.row} />\r\n      <div className={styles.row} />\r\n      <div className={styles.row}>\r\n        <div className={styles.value}>{firstDigit}</div>\r\n        <div className={styles.value}>{currentOperation}</div>\r\n        <div className={styles.value}>{secondDigit}</div>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <div className={styles.value}>=</div>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <div className={styles.textbox}>\r\n          <input\r\n            type=\"number\"\r\n            className={styles.textbox}\r\n            aria-label=\"Set increment amount\"\r\n            value={currentUserAnswer}\r\n            onChange={(e) => {\r\n              if (e.target.value >= 0) {\r\n                setCurrentUserAnswer(Number(e.target.value));\r\n              }\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.keyCode === 13) {\r\n                dispatch(checkAnswer(currentUserAnswer));\r\n                setCurrentUserAnswer(\"\");\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"Increment value\"\r\n            onClick={() => {\r\n              dispatch(checkAnswer(currentUserAnswer));\r\n              setCurrentUserAnswer(\"\");\r\n            }}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={styles.row}>\r\n        Question {currentQuestionNumber} of {numberOfQuestions}\r\n      </div>\r\n      <div className={styles.row}>\r\n        <div className={styles.sideMargins}>\r\n          {numberOfCorrectAnswers} Correct Answers\r\n        </div>{\" \"}\r\n        <div className={styles.sideMargins}>\r\n          {numberOfWrongAnswers} Wrong Answers\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectGameIsRunning } from \"./gameSlice\";\r\n\r\nimport { StartBoard } from \"./StartBoard\";\r\nimport { GameBoard } from \"./GameBoard\";\r\n\r\nconst timeToString = function timeToString(totalSeconds) {\r\n  let hours = Math.floor(totalSeconds / 3600);\r\n  let minutes = Math.floor((totalSeconds - hours * 3600) / 60);\r\n  let seconds = totalSeconds - hours * 3600 - minutes * 60;\r\n\r\n  // round seconds\r\n  seconds = Math.round(seconds * 100) / 100;\r\n\r\n  let result = hours < 10 ? \"0\" + hours : hours;\r\n  result += \":\" + (minutes < 10 ? \"0\" + minutes : minutes);\r\n  result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\r\n\r\n  return result;\r\n};\r\n\r\nexport function Game() {\r\n  const gameIsRunning = useSelector(selectGameIsRunning);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {gameIsRunning ? (\r\n          <GameBoard timeToString={timeToString} />\r\n        ) : (\r\n          <StartBoard timeToString={timeToString} />\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Game } from \"./features/game/Game\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Game />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport gameReducer from '../features/game/gameSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    game: gameReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}